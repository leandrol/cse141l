; PRODUCT
	load $r3, $r3		; R[3] = M[R[3]] ($r3 = A)
	load $r4, $r4		; R[4] = M[R[4]] ($r4 = B)
	load $r5, $r5		; R[5] = M[R[5]] ($r5 = C)


; MULTIPLY A AND B
while1:
	and $r4			; $overflow = B & 1
	bno if1			; branch if LSB of B is 0
	add $r1, $r3		; add lower bits
	bno if1			; branch if no overflow
	incr $r0			; increment upper bits
	add $r0, $r2		; add upper bits


if1:
	lsl $r2			; shift upper bits of A left
	lsl $r3			; shift lower bits of A left
	bno if2			; skip if MSB lower bit is 0
	incr $r2			; add overflow to upper bits of A


if2:
	lsr $r4			; shift B right
	eqz $r4			; overflow = (B == 0)
	bno while1			; loop while B != 0


# MULTIPLY AB AND C
	zero $r2			; initialize $r2 to 0
	zero $r3			; initialize $r3 to 0


while2:
	and $r5			; $overflow = C & 1
	bno if3			; branch if LSB of C is 0
	add $r3, $r1		; add lower bits
	bno if3			; branch if no overflow
	incr $r2			; increment upper bits
	add $r2, $r0		; add upper bits


if3:
	lsl $r0			; shift upper bits of AB left
	lsl $r1			; shift lower bits of AB left
	bno if4			; skip if MSB lower bit was 0
	incr $r0			; add overflow to upper bits of AB


if4:
	lsr $r5			; shift C right
	eqz $r5			; overflow = (C == 0)
	bno while2			; loop while C != 0


	store $r2, $r6		; store upper bits in memory
	store $r3, $r7		; store lower bits in memory
	halt

;STRING MATCH
	;LOAD VALUES OF OPERANDS
	load $r1, $r1	; load pattern from memory


	;OUTER LOOP THROUGH ALL INPUT BYTE STRINGS
	s_while1:
	load $r0, $r6	; load first byte string from memory


	;INNER LOOP THROUGH EVERY 4 BIT COMBO IN EACH STRING
	s_while2:
	match $r0, $r1	; check if lower 4 bits of string match pattern
	bof s_if1		; if pattern match, branch
	lsr $r0		; if no match, s >> 1
	incr $r5		; increment inner loop index, j, by 1
	lt $r4, $r5	; check inner while condition (j < length)
	bno s_if2		; exit loop
	bof while2		; if (j < length) is true, loop inner


	s_if1:
	incr $r2		; increment count by 1


	s_if2:
	incr $r6		; increment outer loop index, i, by 1
 	lt $r6, $r7	; check outer while condition (i < size)
	bof s_while1		; if (i < size) is true, loop outer

	store $r2, $r3	; store the count to memory
	halt

; CLOSEST PAIR
	; OUTER LOOP THROUGH EVERY VALUE IN ARRAY TO COMPARE
	c_while1:
	load $r0, $r2	; x = array[i]
	incr $r2		; i++
	zero $r4		; j = 0
	add $r4, $r2	; j += i (so that j = i)


	;INNER LOOP THROUGH EVERY OTHER VALUE IN ARRAY TO COMPARE TO
	c_while2:
	load $r1, $r4	; y = array[j]
	incr $r4		; j++
	dist $r1, $r0	; calculate dist, overwrite y
	lt $r1, $r6	; check if dist < min
	bno c_if1		; if dist >= min, skip min update
	zero $r6		; min = 0
	add $r6, $r1	; min += dist


	c_if1:
	lt $r4, $r5	; check if j < 20
	bof c_while2		; if j < 20 is true, then loop inner


	lt $r2, $r3	; check if i < 19
	bof c_while1		; if i < 19 is true, then loop outer


	store $r6, $r7	; store min in result address
	halt